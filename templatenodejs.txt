// Licensed under the MIT License.

// DEPLOYMENT INSTRUCTIONS:
// 1. GET FULL NODE PROJECT FROM: https://github.com/luisalvesmartins/botconversationdesigner/tree/master/botcode/nodejs
//    OR FROM HERE: https://lambot.blob.core.windows.net/github/botconversationdesigner/samplenodejs.zip
// 2. REPLACE THE FILE DIALOGS/mainDialog.JS WITH THIS CONTENT 
// 3. RUN THE BOT
//
// MISSING FEATURES:
// TYPE: API,Translation, AppInsights

// Import required Bot Builder
const { DialogSet, DialogTurnStatus, ComponentDialog, WaterfallDialog, TextPrompt, ChoicePrompt } = require('botbuilder-dialogs');
const { MessageFactory, CardFactory } = require('botbuilder');
const { LuisRecognizer, QnAMaker } = require('botbuilder-ai');

var request=require('request-promise');
var jsel=require('jsel');

// Dialog IDs
const MAIN_DIALOG = 'MainDialog';

// Prompt IDs
const NAME_PROMPT = 'namePrompt';
const CHOICE_PROMPT = 'choicePrompt';

var dialogStack=[];

// TEXT STRINGS
###TEXTSTRINGS###

/**
 * @param {String} dialogId unique identifier for this dialog instance
 * @param {PropertyStateAccessor} userProfileAccessor property accessor for user state
 */
class MainDialog extends ComponentDialog {
    constructor(userState, dialogId) {
        super('MainDialog');

        // validate what was passed in
        if (!dialogId) throw new Error('Missing parameter.  dialogId is required');
        //if (!userProfileAccessor) throw new Error('Missing parameter.  userProfileAccessor is required');
        this.userProfileAccessor = userState.createProperty("userState");

        // Add a water fall dialog with 4 steps.
        // The order of step function registration is important
        // as a water fall dialog executes steps registered in order
        this.addDialog(new WaterfallDialog(MAIN_DIALOG, [
            this.MAINSTEP.bind(this),
            this.LOOP.bind(this)
        ]));

        // Add text prompts for name and city
        this.addDialog(new TextPrompt(NAME_PROMPT));
        this.addDialog(new ChoicePrompt(CHOICE_PROMPT));

        this.initialDialogId = MAIN_DIALOG;

        // Save off our state accessor for later use
        //this.userProfileAccessor = userProfileAccessor;
    }

    /**
     * The run method handles the incoming activity (in the form of a DialogContext) and passes it through the dialog system.
     * If no dialog is active, it will start the default dialog.
     * @param {*} dialogContext
     */
    async run(context, accessor) {
        const dialogSet = new DialogSet(accessor);
        dialogSet.add(this);

        const dialogContext = await dialogSet.createContext(context);
        const results = await dialogContext.continueDialog();
        if (results.status === DialogTurnStatus.empty) {
            await dialogContext.beginDialog(MAIN_DIALOG);
        }
    }

    async MAINSTEP(step){
        let userProfile = await this.userProfileAccessor.get(step.context);
        if (userProfile === undefined) {
            userProfile = {step:1};
        }

        var stepNumber=userProfile.step;
        //SAVE step
        await this.userProfileAccessor.set(step.context, userProfile);

        switch (stepNumber) {
//STEPS
###STEPS###    
            default:
                console.log("ERROR");
                userProfile = {step:1};
                await this.userProfileAccessor.set(step.context, userProfile);
                return await step.next();
                break;
        }
    }

    async LOOP(step){
        let userProfile = await this.userProfileAccessor.get(step.context);
        var stepResult = step.result;
        userProfile.result=step.result;
        var expression="";

        switch (userProfile.step) {
///MOVENEXT
###MOVENEXT###            
       
            default:
                break;
        }
        await this.userProfileAccessor.set(step.context, userProfile);


        return await step.replaceDialog(MAIN_DIALOG);
    }
///FUNCTIONS
###FUNCTIONS###    

//ABSTRACTIONS FOR NODE AND C#
    async ReplacePragmas(step,text){
        let userProfile = await this.userProfileAccessor.get(step.context);
        for (var attrname in userProfile)
        {
            text=text.replace("{" + attrname + "}",userProfile[attrname]);
        }
        return text;
    }
    addProp(userProfile,key,value)
    {
        userProfile[key]=value;
    }
    getProp(userProfile,key)
    {
        if (!userProfile[key])
            return "";
        else
            return userProfile[key];
    }
    evalCondition(expression)
    {
        return eval(expression);
    }
    LuisRec(applicationId, endpointKey, endpoint){
        return new LuisRecognizer({
                 applicationId: applicationId,
                 endpointKey: endpointKey,
                 endpoint:  endpoint
            });
    }
    QnA(EndpointKey, KbId, Hostname){
        var qnaEndpointSettings = {
            knowledgeBaseId: KbId,
            endpointKey: EndpointKey,
            host: Hostname
        };
        return new QnAMaker(qnaEndpointSettings);
    }
    async QueryQnAServiceAsync(query, EndpointKey, KnowledgeBaseId, Host)
    {
        var requestUrl = Host + "/knowledgebases/" + KnowledgeBaseId + "/generateanswer";
        var r= {verb:"POST", 
                url:requestUrl, 
                headers:{Authorization:"EndpointKey " + EndpointKey, "Content-Type": "application/json; charset=utf-8"}, 
                data:JSON.stringify({question:query})
            };

        var result=await request({
            "method":r.verb, 
            "uri": r.url,
            "headers":r.headers,
            "body":r.data,
        }).then(
            function(data){
                return data;
                }, 
            function(data){
                console.log("ERROR");
                console.log(data);
            return data;
        });
        result=JSON.parse(result);
        return result.answers;
    }
    async qnaResultsDisplay(step, thisStep, userProfile, qnaResults)
    {
        //console.log(qnaResults);
        if (qnaResults.length > 0)
        {
            var res = qnaResults[0].answer;
            var prompts=[];
            if (qnaResults[0].context)
                prompts = qnaResults[0].context.prompts;

            if (prompts.length>0)
            {
                console.log("PROMPTS")
                console.log(prompts)
                const reply = { type: "message" };

                const buttons = [];
                for (var i = 0; i < prompts.length; i++)
                {
                    buttons.push({ type:"imBack", title: prompts[i].displayText, value: prompts[i].displayText });
                }
                
                const card = CardFactory.heroCard('', undefined,
                    buttons, { text: '' });
                
                reply.attachments = [card];
                
                await step.context.sendActivity(reply);

                userProfile.step = thisStep;
            }
            else
            {
                await step.context.sendActivity(res);
            }
        }
        else
        {
            await step.context.sendActivity("Sorry, didn't find answers in the KB.");
        }
    }
    async SearchQuery(step, searchServiceName, ServiceKey, indexName, fieldTitle, fieldText, filter, searchText)
    {
        var r= {
            verb:"GET", 
            url:"https://" + searchServiceName + ".search.windows.net/indexes/" + indexName + "/docs?api-version=2019-05-06&search=" + searchText,
            headers:{"api-key":ServiceKey},
        };
        var results= await request({
            "method":r.verb, 
            "uri": r.url,
            "headers":r.headers,
            "body":r.data,
        }).then(
            function(data){
                return data;
                }, 
            function(data){
            console.log("ERROR");
            //console.log(data);
            return data;
        });
        results=JSON.parse(results);

        const reply = { type: "message" };
        reply.text = 'This is an inline attachment.';
        reply.attachmentLayout = "carousel";
        var cards=[];
        for (var i = 0; i < results.value.length; i++)
        {
            const card = CardFactory.heroCard(
                '',
                undefined,
                null, 
                { text: results.value[i][fieldText], title:results.value[i][fieldTitle] });

            cards.push(card);
        }
        reply.attachments = cards;

        await step.context.sendActivity(reply);
    }
    suggestActionsOptions(prompt,choices)
    {
        return MessageFactory.suggestedActions(choices,prompt);
    }
    async RESTCall(command){
        var lines=command.split('\n');
        lines[0]=lines[0].trim();
        var p=lines[0].indexOf(' ');
        var verb="GET";
        var url=lines[0];
        if (p>0)
        {
          verb=lines[0].substring(0,p);
          url=lines[0].substring(p+1);
        }
        var header="";
        var index;
        for (index = 1; index < lines.length; index++) {
          const element = lines[index].trim();
          if (element=="")
            break;
          else{
            p=element.indexOf(':');
            if (p<=0)
              return {error:"no header dev"}
            if (header!="")        
              header+=",";
            header+="\"" + element.substring(0,p).trim() + "\":\"" + element.substring(p+1).trim() + "\"";
          }
        }
        header="{" + header + "}";
      
        var data="";
        for (index=index;index < lines.length; index++) {
          data+=lines[index];
        }

        var r= {verb:verb, url:url, headers:JSON.parse(header), data:data};
        return await request({
            "method":r.verb, 
            "uri": r.url,
            "headers":r.headers,
            "body":r.data,
        }).then(
            function(data){
                return data;
                }, 
            function(data){
            console.log("ERROR");
            //console.log(data);
            return data;
        });
    }
    async RESTCallStep(req,key,card) {
        var returnValue=await this.RESTCall(req);
        var dom = jsel(JSON.parse(returnValue));
             
        //FILTER= a.parKey
        var results=dom.selectAll(key);
        var extension="";
        for (let index = 0; index < results.length; index++) {
            const element = results[index];
    
            var dom2 = jsel(element);
    
            //SEARCH a.parCrd for ${}
            var crd=card;
            var p=1;
            while(p>0) {
                p=crd.indexOf("${");
                if (p>=0)
                {
                    var pd=crd.indexOf("}",p);
                    var field=crd.substring(p+2,pd);
        
                    var text=dom2.select(field);
        
                    crd=crd.substring(0,p) + text + crd.substring(pd+1);
                }
            }
    
            if (extension!="")
                extension+=","
            extension+=crd;
        }
        return "[" + extension + "]";
    }
}

exports.MainDialog = MainDialog;