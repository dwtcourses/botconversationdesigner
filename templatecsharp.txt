// Licensed under the MIT License.

// USING BOT TEMPLATE 4.3 
// DEPLOYMENT INSTRUCTIONS:
// 1. GET FULL NODE PROJECT FROM: https://github.com/luisalvesmartins/botconversationdesigner/tree/master/botcode/csharp
//    OR FROM HERE: https://lambot.blob.core.windows.net/github/botconversationdesigner/samplecsharp.zip
// 2. REPLACE THE FILE DIALOGS/MAIN.CS WITH THIS CONTENT 
// 3. RUN THE BOT
//
// MISSING FEATURES:
// TYPE: card,API,DIALOG,REST CALL,Translation

using System;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Bot.Schema;
using Microsoft.Bot.Builder;
using Microsoft.Bot.Builder.Dialogs;
using Microsoft.Extensions.Logging;
using Microsoft.CodeAnalysis.CSharp.Scripting;
using Microsoft.Bot.Builder.AI.Luis;
using Microsoft.Bot.Builder.AI.QnA;
using Microsoft.Bot.Configuration;
using Microsoft.Bot.Builder.Dialogs.Choices;
using System.Net.Http;
using Newtonsoft.Json;
using QnAPrompting.Models;
using Microsoft.Azure.Search;
using Microsoft.Azure.Search.Models;

namespace SampleBot
{
    /// &lt;summary>
    /// Demonstrates the following concepts:
    /// - Use a subclass of ComponentDialog to implement a multi-turn conversation
    /// - Use a Waterflow dialog to model multi-turn conversation flow
    /// - Use custom prompts to validate user input
    /// - Store conversation and user state.
    /// &lt;/summary>
    public class MainDialog : ComponentDialog
    {
        public DialogStack dialogStack=new DialogStack();

        public string MAIN_DIALOG = "mainDialog";
        public string NAME_PROMPT = "namePrompt";
        public string CHOICE_PROMPT = "choicePrompt";

// TEXT STRINGS
###TEXTSTRINGS###

        public IStatePropertyAccessor&lt;userState&gt; UserProfileAccessor { get; }
        protected readonly ILogger Logger;

        // Dialog IDs
        /// &lt;summary>
        /// Initializes a new instance of the &lt;see cref="GreetingDialog"/> class.
        /// &lt;/summary>
        /// &lt;param name="botServices">Connected services used in processing.&lt;/param>
        /// &lt;param name="botState">The &lt;see cref="UserState"/> for storing properties at user-scope.&lt;param>
        /// &lt;param name="loggerFactory">The &lt;see cref="ILoggerFactory"/> that enables logging and tracing.&lt;/param>
        public MainDialog(UserState _userState, ILogger&lt;MainDialog&gt; logger)
            : base(nameof(MainDialog))
        {
            Logger = logger;

            // Add control flow dialogs
            AddDialog(new WaterfallDialog(MAIN_DIALOG,new WaterfallStep[]
                                                    {
                                                            MAINSTEP,
                                                            LOOP
                                                    }
                    ));
            AddDialog(new TextPrompt(NAME_PROMPT));
            AddDialog(new ChoicePrompt(CHOICE_PROMPT) { Style=ListStyle.SuggestedAction });

            UserProfileAccessor = _userState.CreateProperty&lt;userState&gt;(nameof(_userState));

        }

        private async Task&lt;DialogTurnResult> MAINSTEP(WaterfallStepContext step, CancellationToken cancellationToken)
        {
            var userProfile= await UserProfileAccessor.GetAsync(step.Context, () => null);
            if (userProfile == null)
            {
                userProfile = new userState() { step = 1, props=new Dictionary&lt;string, string>() };
                await UserProfileAccessor.SetAsync(step.Context, userProfile);
            }
            var stepNumber = userProfile.step;

            switch (stepNumber) {
//STEPS
###STEPS###    
                    default:
                        userProfile.step=1;
                        await UserProfileAccessor.SetAsync(step.Context, userProfile);
                        return await step.NextAsync();
                }

            return await step.NextAsync();
        }

        private async Task&lt;DialogTurnResult> LOOP(WaterfallStepContext step,CancellationToken cancellationToken)
        {
            var userProfile = await UserProfileAccessor.GetAsync(step.Context, () => null);
            var stepResult = getResult(step);
            string expression="";


            switch (userProfile.step) {
///MOVENEXT
###MOVENEXT###            
        
                default:
                    break;
            }


            await UserProfileAccessor.SetAsync(step.Context, userProfile);
            return await step.ReplaceDialogAsync(MAIN_DIALOG);
        }

///FUNCTIONS
###FUNCTIONS###    
        async Task&lt;DialogTurnResult> STEP_QNAPROMPT(WaterfallStepContext step) //QNA-PROMPT
        {
            var promptoptions = new PromptOptions { Prompt = new Activity { Type = ActivityTypes.Message, Text = "", } };
            return await step.PromptAsync(NAME_PROMPT, promptoptions);
        }

        Activity AdaptiveCard(string cardJSON, WaterfallStepContext step)
        {
            Attachment card = new Attachment()
            {
                Content = JsonConvert.DeserializeObject(cardJSON),
                ContentType = "application/vnd.microsoft.card.adaptive"
            };
            var response = ((Activity)step.Context.Activity).CreateReply();
            response.Attachments = new List&lt;Attachment>() { card };
            return response;
        }


        async Task&lt;string> ReplacePragmas(WaterfallStepContext step, string text)
        {
            var userProfile = await UserProfileAccessor.GetAsync(step.Context, () => null);
            foreach (KeyValuePair&lt;string,string> item in userProfile.props)
            {
                text = text.Replace("{" + item.Key + "}", item.Value);
            } 
            return text;
        }

        void addProp(userState userProfile, string key, string value)
        {
            if (userProfile.props.ContainsKey(key))
                userProfile.props[key] = value;
            else
                userProfile.props.Add(key, value);
        }

        string getProp(userState userProfile,string key)
        {
            return userProfile.props[key];
        }

        bool evalCondition(string expression)
        {
            bool Res = false;
            try {
                var result = CSharpScript.EvaluateAsync(expression).Result;

                if (result.GetType().Name == "String")
                    Res = true;
                else
                {
                    Res = ((bool)result);
                }
            }
            catch (Exception)
            {
                Res = false;
            }
            return Res;
        }
        LuisRecognizer LuisRec(string applicationId,string endpointKey,string endpoint){
            LuisApplication LA = new LuisApplication(applicationId, endpointKey, endpoint);
            return new LuisRecognizer(LA);
        }
        QnAMaker QnA(string EndpointKey, string KbId, string Hostname){
            QnAMakerService Q = new QnAMakerService();
            Q.EndpointKey = EndpointKey;
            Q.KbId = KbId;
            Q.Hostname = Hostname;
            return new QnAMaker(Q);
        }
        public async Task&lt;QnAResult[]&gt; QueryQnAServiceAsync(string query, string EndpointKey, string KnowledgeBaseId, string Host)
        {
            var requestUrl = $"{Host}/knowledgebases/{KnowledgeBaseId}/generateanswer";
            var request = new HttpRequestMessage(HttpMethod.Post, requestUrl);
            var jsonRequest = JsonConvert.SerializeObject(
                new
                {
                    question = query,
                }, Formatting.None);

            request.Headers.Add("Authorization", $"EndpointKey {EndpointKey}");
            request.Content = new StringContent(jsonRequest, System.Text.Encoding.UTF8, "application/json");
            HttpClient _httpClient = new HttpClient();
            var response = await _httpClient.SendAsync(request);
            response.EnsureSuccessStatusCode();

            var contentString = await response.Content.ReadAsStringAsync();

            var result = JsonConvert.DeserializeObject&lt;QnAResultList&gt;(contentString);

            return result.Answers;
        }
        PromptOptions suggestActionsOptions(string prompt,string[] choices)
        {
            List&lt;Choice> LC = new List&lt;Choice>();
            foreach (var item in choices)
            {
                LC.Add(new Choice(item));
            }
            var opts = new PromptOptions
            {
                Prompt = MessageFactory.Text(prompt),
                Choices = LC
            };

            return opts;
        }
        string getResult(WaterfallStepContext step)
        {
            string stepResult = "";
            try
            {
                stepResult = (string)step.Result;
            }
            catch (Exception)
            {
                stepResult = ((FoundChoice)step.Result).Value;
            }
            return stepResult;
        }
        private async Task qnaResultsDisplay(WaterfallStepContext step, int thisStep, userState userProfile, QnAResult[] qnaResults, CancellationToken cancellationToken)
        {
            if (qnaResults.Length > 0)
            {
                var res = qnaResults[0].Answer;
                var prompts = qnaResults[0].Context?.Prompts;

                if (prompts!=null){
                    if (prompts.Length > 0)
                    {
                        var buttons = new List&lt;Choice>();
                        for (int i = 0; i &lt; prompts.Length; i++)
                        {
                            CardAction CA = new CardAction() { Type = ActionTypes.ImBack, Title = prompts[i].DisplayText, Value = prompts[i].DisplayText };
                            buttons.Add(new Choice { Action = CA, Value = prompts[i].DisplayText });
                        }

                        var options = new PromptOptions()
                        {
                            Prompt = MessageFactory.Text(res),
                            Style = ListStyle.HeroCard,
                            Choices = buttons,
                        };

                        await step.PromptAsync(CHOICE_PROMPT, options, cancellationToken);
                        userProfile.step = thisStep;
                    }
                    else
                    {
                        await step.Context.SendActivityAsync(res);
                    }
                }
                else
                {
                    await step.Context.SendActivityAsync(res);
                }
            }
            else
            {
                await step.Context.SendActivityAsync("Sorry, didn't find answers in the KB.");
            }
        }
        public async Task SearchQuery(WaterfallStepContext step, string searchServiceName, string ServiceKey, string indexName, string fieldTitle, string fieldText, string filter, string searchText)
        {
            SearchServiceClient serviceClient = new SearchServiceClient(searchServiceName, new SearchCredentials(ServiceKey));
            ISearchIndexClient indexClient = serviceClient.Indexes.GetClient(indexName);

            SearchParameters parameters =
                new SearchParameters()
                {
                    //Filter = "Rooms/any(r: r/BaseRate lt 100)",
                    Select = new[] { "*" }
                };

            var results = indexClient.Documents.Search(searchText, parameters);

            List&lt;Attachment> attachments=new List&lt;Attachment>();
            var reply = MessageFactory.Attachment(attachments);
            reply.AttachmentLayout = AttachmentLayoutTypes.Carousel;
            for (int i = 0; i &lt; results.Results.Count; i++)
            {
                HeroCard plCard1 = new HeroCard()
                {
                    Title = results.Results[i].Document[fieldTitle].ToString(),
                    Text = results.Results[i].Document[fieldText].ToString()
                };
                reply.Attachments.Add(plCard1.ToAttachment());
            }

            await step.Context.SendActivityAsync(reply);
        }

    }

    public class userState
    {
        public int step { get; set; }
        public Dictionary&lt;string, string&gt; props;
    }
    public class DialogStack {
        List&lt;DialogStep> stack=new List&lt;DialogStep>();
        public void push(DialogStep ob)
        {
            stack.Add(ob);
        }
        public DialogStep pop()
        {
            DialogStep o = stack[stack.Count - 1];
            stack.RemoveAt(stack.Count - 1);
            return o;
        }
    };
    public class DialogStep
    {
        public int step{ get; set; }
        public string dialog { get; set; }
    }
}

namespace QnAPrompting.Models
{
    public class QnAResultList
    {
        public QnAResult[] Answers { get; set; }
    }
    public class QnAResult
    {
        public string[] Questions { get; set; }

        public string Answer { get; set; }

        public double Score { get; set; }

        public int Id { get; set; }

        public string Source { get; set; }

        public QnAMetadata[] Metadata { get; }

        public QnAContext Context { get; set; }
    }
    public class QnAMetadata
    {
        public string Name { get; set; }

        public string Value { get; set; }
    }
    public class QnAContext
    {
        public QnAPrompts[] Prompts { get; set; }
    }
    public class QnAPrompts
    {
        public int DisplayOrder { get; set; }

        public int QnaId { get; set; }

        public string DisplayText { get; set; }
    }
}
